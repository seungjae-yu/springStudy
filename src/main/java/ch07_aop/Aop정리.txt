# Advice
 : '언제' 공통 관심 기능을 핵심 로직에 적용할 지를 정의.
   ex)메서드 호출 전/ 트랜잭션 시작할 때
   * 스프링에서 적용가능한 Advice종류는 다음과 같다.
    Before Advice / After Returning Advice / After Throwing Advice / After Advice / Around Advice
    이 중 Around Advice를 가장 많이 사용하며 대상 객체의 메서드 실행 전, 후 또는 익셉션 발생 시섬제 공통 기능을 실행하는데 사용

# Joinpoint
 : Advice를 적용 가능한 지점. 메서드 호출, 필드 값 변경 등이 JoinPoint에 해당.
   스프링은 프록시를 이용해서 AOP를 구현하기 때문에 메서드 호출에 대한 JoinPoint만 지원.

# PointCut
 : JoinPoint의 부분집합으로 실제 Advice가 적용되는 JoinPoint를 나타냄.
   스프링에서는 정규 표현식이나 AspectJ의 문법을 이용하여 PointCut을 정의한다.

# Weaving
 : Advice를 핵심 로직 코드에 적용하는것.

# Aspect
 : 여러 객체에 공통으로 적용되는 기능을 Aspect라고 함.
   트랜잭션이나 보안등이 Aspect의 예이다.


#Spring AOP 적용방법
 1. Aspect로 사용할 클래스에 @Aspect 어노테이션 붙임
 2. @PointCut 어노테이션으로 공통 기능을 적용할 PointCut을 정의
 3. 공통 기능을 구현한 메서드에 @Around 어노테이션 붙임